{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","first_name","last_name","email","age","phone","address","password","conf_password","gender","reminder","onClick","nr","setState","submitHandler","event","preventDefault","axios","post","then","res","console","log","data","changeHandler","target","name","value","className","md","onSubmit","this","noValidate","action","method","htmlFor","onChange","type","id","placeholder","required","minLength","maxLength","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4abe1f49.chunk.js","sourcesContent":["import React from 'react';\n\nimport axios from 'axios';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nimport {MDBContainer ,MDBRow, MDBCol, MDBBtn,MDBInput } from \"mdbreact\";\n\nclass App extends React.Component {\n  state = {\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    age: \"\",\n    phone: \"\",\n    address: \"\",\n    password: \"\",\n    conf_password: \"\",\n    gender: \"\",\n    reminder: \"\"\n  };\n  onClick = (nr) => () => {\n    this.setState({\n      gender: nr\n    });\n  }\n  submitHandler = event => {\n    event.preventDefault();\n    axios.post(`http://localhost:3000/users/registration`,  this.state )\n    .then(res => {\n      console.log(res);\n      console.log(res.data);\n    })\n  };\n\n  changeHandler = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <MDBContainer>\n  <MDBRow>\n    <MDBCol md=\"6\">\n      <form className=\"needs-validation\"\n          onSubmit={this.submitHandler}\n          noValidate action=\"./Registration\" method=\"post\">\n   <MDBRow>\n            <MDBCol md=\"12\" className=\"mb-3\">\n              <label\n                htmlFor=\"defaultFormRegisterNameEx\"\n                className=\"grey-text\"\n              >\n                First name\n              </label>\n              <input\n                value={this.state.first_name}\n                name=\"first_name\"\n                onChange={this.changeHandler}\n                type=\"text\"\n                id=\"defaultFormRegisterNameEx\"\n                className=\"form-control\"\n                placeholder=\"First name\"\n                required\n                minLength=\"2\"\n              />\n              <div className=\"valid-feedback\">Looks good!</div>\n            </MDBCol>\n            <MDBCol md=\"12\" className=\"mb-3\">\n              <label\n                htmlFor=\"defaultFormRegisterEmailEx2\"\n                className=\"grey-text\"\n              >\n                Last name\n              </label>\n              <input\n              minLength=\"5\"\n                value={this.state.last_name}\n                name=\"last_name\"\n                onChange={this.changeHandler}\n                type=\"text\"\n                id=\"defaultFormRegisterEmailEx2\"\n                className=\"form-control\"\n                placeholder=\"Last name\"\n                required\n              />\n              <div className=\"valid-feedback\">Looks good!</div>\n            </MDBCol>\n            <MDBCol md=\"12\" className=\"mb-3\">\n              <label\n                htmlFor=\"phone\"\n                className=\"grey-text\"\n              >\n                Phone\n              </label>\n              <input\n                value={this.state.phone}\n                name=\"phone\"\n                onChange={this.changeHandler}\n                type=\"tel\"\n                id=\"phone\"\n                className=\"form-control\"\n                placeholder=\"Phone\"\n                required\n              />\n              <div className=\"valid-feedback\">Looks good!</div>\n            </MDBCol>\n            <MDBCol md=\"12\" className=\"mb-3\">\n              <label\n                htmlFor=\"age\"\n                className=\"grey-text\"\n              >\n                Age\n              </label>\n              <input\n                value={this.state.age}\n                name=\"age\"\n                onChange={this.changeHandler}\n                type=\"number\"\n                id=\"age\"\n                className=\"form-control\"\n              />\n              <div className=\"valid-feedback\">Looks good!</div>\n            </MDBCol>\n            <MDBCol md=\"12\" className=\"mb-3\">\n            <div className=\"custom-control custom-radio pl-3\">\n              <input\n                className=\"custom-control-input\"\n                onClick={this.onClick(\"man\")}\n                type=\"radio\"\n                value=\"\"\n                id=\"radio0\"\n                name=\"gender\"\n                \n              />\n              <label className=\"custom-control-label\" htmlFor=\"radio0\">\n                Man\n              </label>\n            </div>\n          </MDBCol>\n          <MDBCol md=\"12\" className=\"mb-3\">\n            <div className=\"custom-control custom-radio pl-3\">\n              <input\n                className=\"custom-control-input\"\n                onClick={this.onClick(\"woman\")}\n                type=\"radio\"\n                value=\"\"\n                id=\"radio1\"\n                name=\"gender\"\n                \n              />\n              <label className=\"custom-control-label\" htmlFor=\"radio1\">\n                Woman\n              </label>\n            </div>\n          </MDBCol>\n          <MDBCol md=\"12\" className=\"mb-3\">\n              <label\n                htmlFor=\"defaultFormRegisterConfirmEx3\"\n                className=\"grey-text\"\n              >\n                Address\n              </label>\n              <input\n                value={this.state.address}\n                onChange={this.changeHandler}\n                type=\"text\"\n                id=\"defaultFormRegisterConfirmEx3\"\n                className=\"form-control\"\n                name=\"address\"\n                placeholder=\"address\"\n              />\n            </MDBCol>\n            <MDBCol md=\"12\" className=\"mb-3\">\n              <label\n                htmlFor=\"defaultFormRegisterConfirmEx3\"\n                className=\"grey-text\"\n              >\n                Email\n              </label>\n              <input\n                value={this.state.email}\n                onChange={this.changeHandler}\n                type=\"email\"\n                id=\"defaultFormRegisterConfirmEx3\"\n                className=\"form-control\"\n                name=\"email\"\n                required\n                placeholder=\"Your Email address\"\n              />\n            </MDBCol>\n          </MDBRow>\n          <MDBRow>\n            <MDBCol md=\"12\" className=\"mb-3\">\n              <label\n                htmlFor=\"password\"\n                className=\"grey-text\"\n              >\n                Password\n              </label>\n              <input\n                value={this.state.password}\n                onChange={this.changeHandler}\n                type=\"password\"\n                id=\"password\"\n                className=\"form-control\"\n                name=\"password\"\n                placeholder=\"password\"\n                minLength=\"9\"\n                required\n              />\n              <div className=\"invalid-feedback\">\n                Please provide a valid city.\n              </div>\n              <div className=\"valid-feedback\">Looks good!</div>\n            </MDBCol>\n            <MDBCol md=\"12\" className=\"mb-3\">\n              <label\n                htmlFor=\"confirmPassword\"\n                className=\"grey-text\"\n              >\n                Confirm Passord\n              </label>\n              <input\n                value={this.state.state}\n                onChange={this.changeHandler}\n                type=\"password\"\n                id=\"confirmPassword\"\n                className=\"form-control\"\n                name=\"conf_password\"\n                placeholder=\"Confirm Password\"\n                minLength=\"9\"\n                required\n              />\n              <div className=\"invalid-feedback\">\n                Please provide a valid state.\n              </div>\n              <div className=\"valid-feedback\">Looks good!</div>\n            </MDBCol>\n            <MDBCol md=\"12\" className=\"mb-3\">\n              <label\n                htmlFor=\"confirmPassword\"\n                className=\"grey-text\"\n              >\n                    reminder\n              </label>\n              <input\n                value={this.state.state}\n                onChange={this.changeHandler}\n                type=\"text\"\n                id=\"reminder\"\n                className=\"form-control\"\n                name=\"reminder\"\n                placeholder=\"reminder\"\n                maxLength=\"10\"\n              />\n              <div className=\"invalid-feedback\">\n                Please provide a valid state.\n              </div>\n              <div className=\"valid-feedback\">Looks good!</div>\n            </MDBCol>\n           \n          </MDBRow>\n  \n          <MDBBtn color=\"primary\" type=\"submit\">\n           Sign Up\n          </MDBBtn>\n      </form>\n    </MDBCol>\n  </MDBRow>\n</MDBContainer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}